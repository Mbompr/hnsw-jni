plugins {
    id 'java'
    id 'java-library'
    id 'com.criteo.moab-module'
}

apply plugin : 'java'

test {
    testLogging.showStandardStreams = true
}

ext {
    jniFolder = "$buildDir/generated/jni/java"
}

repositories {
   jcenter()
}

sourceSets {
    javacpp

    nativeLib {
        java {
            srcDir jniFolder
        }
    }
}

group = "com.criteo.hnsw"

configurations {
    nativeLibImplementation
}

dependencies {
    nativeLibImplementation files(sourceSets.javacpp.runtimeClasspath)
    api files(sourceSets.nativeLib.runtimeClasspath)
    javacppImplementation group: 'org.bytedeco', name: 'javacpp', version: '1.5'
    testImplementation 'junit:junit:4.12'
}

def HnswLibConfigClass= "HnswLibConfig"
def HnswLibClass= "HnswLib"

processJavacppResources {
    from('src/main/cpp') {
        into 'com/criteo/hnsw'
    }
}

task('runHelloWorld', type:JavaExec) {
    doFirst {
        project.mkdir('build/run/bin')
    }
    group = "Execution"
    description = "Sample program"
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.criteo.hnsw.HelloHnsw'
    workingDir = 'build/run'
}

task generateJniClass(type: JavaExec) {
    classpath = sourceSets.javacpp.runtimeClasspath
    main = 'org.bytedeco.javacpp.tools.Builder'
    args = [
        '-d', jniFolder,
        "com.criteo.hnsw.${HnswLibConfigClass}"
    ]
    workingDir = "build/resources/javacpp/com/criteo/hnsw"
    outputs.dir(jniFolder)
}

compileNativeLibJava.dependsOn(generateJniClass)

task('prepareCompilationFolder', type:Copy) {
    into('build/tmp/compilation')
    from(sourceSets.nativeLib.output)
    from(sourceSets.javacpp.output)
    from(generateJniClass)
}

task generateLibrary(type: JavaExec) {
    outputs.dir("build/tmp/compilation")
    classpath = prepareCompilationFolder.outputs.files +sourceSets.javacpp.compileClasspath
    main = 'org.bytedeco.javacpp.tools.Builder'
    args = [
        '-classpath', 'build/tmp/compilation',
        '-nodelete',
        '-Xcompiler', '-mavx',
        '-Xcompiler', '-msse4',
        "com.criteo.hnsw.${HnswLibClass}"
    ]
}

processResources {
    from(generateLibrary)
}
