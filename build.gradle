apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}
 
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'com.criteo.hnsw.HelloHnsw'

repositories {
   jcenter()
}

configurations {
    javacpp
}

archivesBaseName = "hnsw-jni"
group = "com.criteo.hnsw"
version = "0.2"

dependencies {
    javacpp group: 'org.bytedeco', name: 'javacpp', version: '1.4.4'
    compile configurations.javacpp.dependencies
    testCompile 'junit:junit:4.12'

}

def HnswLibConfigClass= "HnswLibConfig"
def HnswLibClass= "HnswLib"

task compileConfig(type: JavaCompile) {
    source = fileTree(dir: 'src', include: "**/${HnswLibConfigClass}.java")
    destinationDir = file(sourceSets.main.java.outputDir)
    classpath = files([configurations.javacpp.asPath])
}

task copyCpp(type: Copy) {
    from "src/main/cpp/"
    include "**"
    into file("${sourceSets.main.java.outputDir}/com/criteo/hnsw/")
}

task generateJniClass(type: JavaExec, dependsOn: ['compileConfig', 'copyCpp']) {
    classpath = files([configurations.javacpp.asPath])
    main = 'org.bytedeco.javacpp.tools.Builder'
    args = [
        '-classpath', sourceSets.main.java.outputDir,
        '-d', 'src/main/java/',
        "com.criteo.hnsw.${HnswLibConfigClass}"
    ]
}

task compileLib(type: JavaCompile, dependsOn: 'generateJniClass') {
    source = fileTree(dir: 'src', include: ["**/${HnswLibClass}.java", "**/${HnswLibConfigClass}.java"])
    destinationDir = file(sourceSets.main.java.outputDir)
    classpath = files([configurations.javacpp.asPath])
}

task generateLibrary(type: JavaExec, dependsOn: 'compileLib') {
    classpath = files([configurations.javacpp.asPath])
    main = 'org.bytedeco.javacpp.tools.Builder'
    args = [
        '-classpath', sourceSets.main.java.outputDir,
        '-nodelete',
        "com.criteo.hnsw.${HnswLibClass}"
    ]
}
compileJava.dependsOn generateLibrary
compileTestJava.dependsOn generateLibrary

publishing {
    publications {
        hnswjniUberJar(MavenPublication) {
            groupId group
            artifactId archivesBaseName
            version version
            artifact shadowJar
        }
    }

    repositories {
        maven {
            credentials {
                username System.env.MAVEN_USER
                password System.env.MAVEN_PASSWORD
            }
            url = project.publishUrl
        }
    }
}